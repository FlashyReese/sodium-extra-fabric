buildscript {
    dependencies {
        classpath "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate}"
    }
    repositories {
        maven {
            name = 'CrowdinTranslate source'
            url = "https://minecraft.guntram.de/maven/"
        }
    }
}

plugins {
    id 'signing'
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.10.0'
}

apply plugin: 'de.guntram.mcmod.crowdin-translate'
crowdintranslate.crowdinProjectName = 'sodium-extra'
crowdintranslate.minecraftProjectName = 'sodium-extra'
crowdintranslate.verbose = false

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}${getVersionType(project.version_type, project.revision)}+mc${project.minecraft_version}-${getVersionMetadata()}"
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/sodium-extra.accesswidener")
}

repositories {
    maven { 
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://maven.flashyreese.me/releases"
    }
    maven {
        url "https://maven.flashyreese.me/snapshots"
    }
    maven {
        url = "https://minecraft.guntram.de/maven/"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //modImplementation "me.jellysquid.mods:sodium-fabric:0.5.3+git.95de8a8"
    modImplementation "maven.modrinth:sodium:${project.sodium_version}"
    /*modImplementation("me.flashyreese.mods:reeses-sodium-options:${project.reeses_sodium_options}") {
        exclude group: "net.coderbot.iris_mc1_19", module: "iris"
    }*/
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    // Currently using altrisi/CaffeineConfig until it is officially available through CaffeineMC's maven repository
    // Todo: Use https://github.com/CaffeineMC/mixin-config when available
    include(modImplementation("net.caffeinemc:CaffeineConfig:1.3.0+1.17"))
    include(modImplementation("de.guntram.mcmod:crowdin-translate:${project.crowdin_translate}"))

    //modRuntimeOnly "maven.modrinth:lazydfu:0.1.3"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

build {
    dependsOn downloadTranslations
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE.txt"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        maven {
            name = "FlashyReeseReleases"
            url = "https://maven.flashyreese.me/releases"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "FlashyReeseSnapshots"
            url = "https://maven.flashyreese.me/snapshots"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

static def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }
    // No tracking information could be found about the build
    return "unknown"
}

static def getVersionType(String version_type, String revision) {
    version_type = version_type.trim().toLowerCase()
    revision = revision.trim().toLowerCase()
    if (version_type != "release") {
        return "-${version_type}${revision}"
    }
    return ""
}